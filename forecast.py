import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.losses import MeanSquaredError
from database import get_input_data_from_mysql  # L·∫•y d·ªØ li·ªáu t·ª´ MySQL
from firebase_service import push_forecast_to_firebase , push_forecast_7d_to_firebase  # ƒê·∫©y d·ªØ li·ªáu l√™n Firebase
# def forecast_24h():
#     # 1. L·∫•y d·ªØ li·ªáu t·ª´ MySQL
#     df = get_input_data_from_mysql()
#     if df is None or len(df) < 24:
#         print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ d·ª± b√°o!")
#         return

#     # 2. Ch·ªçn c·ªôt c·∫ßn thi·∫øt cho d·ª± b√°o
#     thong_so = ['QV2M', 'PRECTOTCORR', 'PS', 'T2M', 'ALLSKY_SFC_PAR_TOT']
#     df = df[thong_so]

#     # 3. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
#     scaler = StandardScaler()
#     du_lieu_chuan_hoa = scaler.fit_transform(df)

#     # 4. Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho m√¥ h√¨nh (lu√¥n l·∫•y 24 gi·ªù cu·ªëi)
#     buoc_nhap = 24
#     if len(du_lieu_chuan_hoa) >= buoc_nhap:
#         X = np.array([du_lieu_chuan_hoa[-buoc_nhap:]])  # Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh (1, 24, s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng)
#     else:
#         print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o ƒë·∫ßu v√†o!")
#         return

#     # 5. T·∫£i m√¥ h√¨nh d·ª± b√°o
#     custom_objects = {'mse': MeanSquaredError()}
#     model = load_model("D:\\SERVER_DBTT\\dubao.keras", custom_objects=custom_objects)

#     # 6. D·ª± b√°o 24 gi·ªù ti·∫øp theo (D√πng tf.function ƒë·ªÉ gi·∫£m retracing)
#     @tf.function(reduce_retracing=True)
#     def du_doan(model, X):
#         return model(X)

#     Y_du_doan = du_doan(model, X).numpy()  # Chuy·ªÉn k·∫øt qu·∫£ v·ªÅ numpy

#     # 7. Bi·∫øn ƒë·ªïi d·ªØ li·ªáu v·ªÅ gi√° tr·ªã g·ªëc
#     Y_du_doan_reshaped = Y_du_doan.reshape(-1, X.shape[2])
#     Y_du_doan_nguyen = scaler.inverse_transform(Y_du_doan_reshaped)
#     Y_du_doan_nguyen = Y_du_doan_nguyen.reshape(Y_du_doan.shape)

#     # 8. L·∫•y d·ª± b√°o 24 gi·ªù ti·∫øp theo
#     du_bao_24h = Y_du_doan_nguyen[0]  # L·∫•y k·∫øt qu·∫£ d·ª± b√°o duy nh·∫•t

#     # 9. T·∫°o DataFrame k·∫øt qu·∫£ d·ª± b√°o
#     du_bao_24h_df = pd.DataFrame(du_bao_24h, columns=thong_so)
#     du_bao_24h_df['PRECTOTCORR'] = du_bao_24h_df['PRECTOTCORR'].clip(lower=0)
#     du_bao_24h_df['ALLSKY_SFC_PAR_TOT'] = du_bao_24h_df['ALLSKY_SFC_PAR_TOT'].clip(lower=0)


#     # 10. X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian cho d·ª± b√°o
#     last_time = df.index[-1]
#     thoi_gian_du_bao = pd.date_range(start=last_time + pd.Timedelta(hours=1), periods=24, freq='h')
#     du_bao_24h_df.index = thoi_gian_du_bao
#     du_bao_24h_df.index.name = 'thoigian'

#     # 11. In k·∫øt qu·∫£ d·ª± b√°o
#     print("‚úÖ D·ª± b√°o 24 gi·ªù ti·∫øp theo:")
#     print(du_bao_24h_df)

#     # 12. ƒê·∫©y k·∫øt qu·∫£ l√™n Firebase
#     push_forecast_to_firebase(du_bao_24h_df)

# def forecast_7d():
#     # 1. L·∫•y d·ªØ li·ªáu t·ª´ MySQL
#     df = get_input_data_from_mysql(so_gio=168)  # L·∫•y 7 ng√†y (168 gi·ªù)
#     if df is None or len(df) < 168:
#         print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ d·ª± b√°o!")
#         return

#     # 2. Ch·ªçn c·ªôt c·∫ßn thi·∫øt cho d·ª± b√°o
#     thong_so = ['QV2M', 'PRECTOTCORR', 'PS', 'T2M', 'ALLSKY_SFC_PAR_TOT']
#     df = df[thong_so]

#     # 3. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
#     scaler = StandardScaler()
#     du_lieu_chuan_hoa = scaler.fit_transform(df)

#     # 4. Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho m√¥ h√¨nh (lu√¥n l·∫•y 24 gi·ªù cu·ªëi)
#     buoc_nhap = 168
#     if len(du_lieu_chuan_hoa) >= buoc_nhap:
#         X = np.array([du_lieu_chuan_hoa[-buoc_nhap:]])  # Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh (1, 24, s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng)
#     else:
#         print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o ƒë·∫ßu v√†o!")
#         return

#     # 5. T·∫£i m√¥ h√¨nh d·ª± b√°o
#     custom_objects = {'mse': MeanSquaredError()}
#     model = load_model("D:\\SERVER_DBTT\\dubao_7d.keras", custom_objects=custom_objects)

#     # 6. D·ª± b√°o 7day ti·∫øp theo (D√πng tf.function ƒë·ªÉ gi·∫£m retracing)
#     @tf.function(reduce_retracing=True)
#     def du_doan(model, X):
#         return model(X)

#     Y_du_doan = du_doan(model, X).numpy()  # Chuy·ªÉn k·∫øt qu·∫£ v·ªÅ numpy

#     # 7. Bi·∫øn ƒë·ªïi d·ªØ li·ªáu v·ªÅ gi√° tr·ªã g·ªëc
#     Y_du_doan_reshaped = Y_du_doan.reshape(-1, X.shape[2])
#     Y_du_doan_nguyen = scaler.inverse_transform(Y_du_doan_reshaped)
#     Y_du_doan_nguyen = Y_du_doan_nguyen.reshape(Y_du_doan.shape)

#     # 8. L·∫•y d·ª± b√°o 24 gi·ªù ti·∫øp theo
#     du_bao_7d = Y_du_doan_nguyen[0]  # L·∫•y k·∫øt qu·∫£ d·ª± b√°o duy nh·∫•t

#     # 9. T·∫°o DataFrame k·∫øt qu·∫£ d·ª± b√°o
#     du_bao_7d_df = pd.DataFrame(du_bao_7d, columns=thong_so)
#     du_bao_7d_df['PRECTOTCORR'] = du_bao_7d_df['PRECTOTCORR'].clip(lower=0)
#     du_bao_7d_df['ALLSKY_SFC_PAR_TOT'] = du_bao_7d_df['ALLSKY_SFC_PAR_TOT'].clip(lower=0)


#     # 10. X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian cho d·ª± b√°o
#     last_time = df.index[-1]
#     thoi_gian_du_bao = pd.date_range(start=last_time + pd.Timedelta(hours=1), periods=168, freq='h')
#     du_bao_7d_df.index = thoi_gian_du_bao
#     du_bao_7d_df.index.name = 'thoigian'

#     # 12. T√≠nh min/max m·ªói ng√†y cho c√°c th√¥ng s·ªë ch√≠nh
#     du_bao_ngay = du_bao_7d_df.resample('D').agg({
#         'T2M': ['min', 'max'],
#         'QV2M': ['min', 'max'],
#         'PRECTOTCORR': ['min', 'max']
#     })
#     # ƒê·ªïi t√™n 
#     du_bao_ngay.columns = ['T2M_min', 'T2M_max', 'QV2M_min', 'QV2M_max', 'PRECTOTCORR_min', 'PRECTOTCORR_max']

#     # In ra b·∫£ng t·ªïng h·ª£p
#     print("\nüìä Th·ªëng k√™ d·ª± b√°o t·ª´ng ng√†y:")
#     print(du_bao_ngay)
    
#     du_bao_ngay.index = du_bao_ngay.index.strftime('%Y-%m-%d')  # B·ªè gi·ªù
#     push_forecast_to_firebase(du_bao_ngay)  # ƒê·∫©y l√™n Firebase
#     # # 11. In k·∫øt qu·∫£ d·ª± b√°o
#     # print("‚úÖ D·ª± b√°o 168 gi·ªù ti·∫øp theo:")
#     # print(du_bao_7d_df)

# ____________________________________________________________________________________
# D·ª± b√°o 24h
def forecast_24h(model_24h):
    df = get_input_data_from_mysql()
    if df is None or len(df) < 24:
        print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ d·ª± b√°o 24h!")
        return

    thong_so = ['QV2M', 'PRECTOTCORR', 'PS', 'T2M', 'ALLSKY_SFC_PAR_TOT']
    df = df[thong_so]

    scaler = StandardScaler()
    du_lieu_chuan_hoa = scaler.fit_transform(df)
    
    buoc_nhap = 24
    X = np.array([du_lieu_chuan_hoa[-buoc_nhap:]])

    Y_du_doan = model_24h(X).numpy()
    Y_du_doan_nguyen = scaler.inverse_transform(Y_du_doan.reshape(-1, X.shape[2])).reshape(Y_du_doan.shape)
    
    du_bao_24h_df = pd.DataFrame(Y_du_doan_nguyen[0], columns=thong_so)
    du_bao_24h_df['PRECTOTCORR'] = du_bao_24h_df['PRECTOTCORR'].clip(lower=0)
    du_bao_24h_df['ALLSKY_SFC_PAR_TOT'] = du_bao_24h_df['ALLSKY_SFC_PAR_TOT'].clip(lower=0)

    last_time = df.index[-1]
    du_bao_24h_df.index = pd.date_range(start=last_time + pd.Timedelta(hours=1), periods=24, freq='h')
    du_bao_24h_df.index.name = 'thoigian'

    print("‚úÖ D·ª± b√°o 24 gi·ªù ti·∫øp theo:")
    print(du_bao_24h_df)
    push_forecast_to_firebase(du_bao_24h_df)

# D·ª± b√°o 7 ng√†y
def forecast_7d(model_7d):
    df = get_input_data_from_mysql(so_gio=168)
    if df is None or len(df) < 168:
        print("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ d·ª± b√°o 7 ng√†y!")
        return

    thong_so = ['QV2M', 'PRECTOTCORR', 'PS', 'T2M', 'ALLSKY_SFC_PAR_TOT']
    df = df[thong_so]

    scaler = StandardScaler()
    du_lieu_chuan_hoa = scaler.fit_transform(df)

    buoc_nhap = 168
    X = np.array([du_lieu_chuan_hoa[-buoc_nhap:]])

    Y_du_doan = model_7d(X).numpy()
    Y_du_doan_nguyen = scaler.inverse_transform(Y_du_doan.reshape(-1, X.shape[2])).reshape(Y_du_doan.shape)

    du_bao_7d_df = pd.DataFrame(Y_du_doan_nguyen[0], columns=thong_so)
    du_bao_7d_df['PRECTOTCORR'] = du_bao_7d_df['PRECTOTCORR'].clip(lower=0)
    du_bao_7d_df['ALLSKY_SFC_PAR_TOT'] = du_bao_7d_df['ALLSKY_SFC_PAR_TOT'].clip(lower=0)

    last_time = df.index[-1]
    du_bao_7d_df.index = pd.date_range(start=last_time + pd.Timedelta(hours=1), periods=168, freq='h')
    du_bao_7d_df.index.name = 'thoigian'

    du_bao_ngay = du_bao_7d_df.resample('D').agg({
        'T2M': ['min', 'max'],
        'QV2M': 'mean',
        'PRECTOTCORR': 'mean',
        'PS': 'mean',
        'ALLSKY_SFC_PAR_TOT': 'mean'
    })
    du_bao_ngay.columns = ['T2M_min', 'T2M_max', 'QV2M', 'PRECTOTCORR', 'PS', 'ALLSKY_SFC_PAR_TOT']
    du_bao_ngay.index = du_bao_ngay.index.strftime('%Y-%m-%d')

    print("\nüìä Th·ªëng k√™ d·ª± b√°o t·ª´ng ng√†y:")
    print(du_bao_ngay)
    push_forecast_7d_to_firebase(du_bao_ngay)  # ƒê·∫©y l√™n
